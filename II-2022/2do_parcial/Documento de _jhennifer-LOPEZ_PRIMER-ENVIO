{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "###ejercicio1\n",
        "metodo de rectangulo"
      ],
      "metadata": {
        "id": "Ye9jtlpDfq2_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "-ASuAVvxfzTv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.axvline(0, color='r')   # Eje de las ordenadas\n",
        "plt.axhline(0, color='r')   # Eje de las abscisas\n",
        "\n",
        "x = np.linspace(-0.9, 1.1, 100)\n",
        "y = (x)*np.sqrt(x**2+9)\n",
        "plt.plot(x, y)\n",
        "\n",
        "plt.grid()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "q_2icAUyf5Im",
        "outputId": "beccac6a-9c21-4836-ca4c-44c52f8c189a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "solucion por rectangulos"
      ],
      "metadata": {
        "id": "gR1caer0kYgA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = np.linspace(-1,1,20)\n",
        "print(x)\n",
        "print(type(x))\n",
        "y = (x)*np.sqrt(x**2+9)\n",
        "print(y)\n",
        "y1 = y[0:-1]\n",
        "dx = x[1] - x[0]                        # Ancho de cada rectángulo\n",
        "print(dx)\n",
        "fArea = dx*np.sum(y1)                    # Rectángulo ancho * alto, luego suma\n",
        "print(\"Integral area:\",fArea)"
      ],
      "metadata": {
        "id": "id2Fpirjgwy_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "538e8670-c071-4816-bf3c-40df17c0c090"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[-1.         -0.89473684 -0.78947368 -0.68421053 -0.57894737 -0.47368421\n",
            " -0.36842105 -0.26315789 -0.15789474 -0.05263158  0.05263158  0.15789474\n",
            "  0.26315789  0.36842105  0.47368421  0.57894737  0.68421053  0.78947368\n",
            "  0.89473684  1.        ]\n",
            "<class 'numpy.ndarray'>\n",
            "[-3.16227766 -2.80104853 -2.4490574  -2.1053397  -1.7688884  -1.43865753\n",
            " -1.11356652 -0.79250524 -0.47433983 -0.15791903  0.15791903  0.47433983\n",
            "  0.79250524  1.11356652  1.43865753  1.7688884   2.1053397   2.4490574\n",
            "  2.80104853  3.16227766]\n",
            "0.10526315789473684\n",
            "Integral area: -0.33287133264930346\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### metodo de trapecios"
      ],
      "metadata": {
        "id": "ATPCjiTNhesY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = np.linspace(-1,1,20)\n",
        "y = (x)*np.sqrt(x**2+9)\n",
        "y1 = y[1:-1]\n",
        "dx = x[1] - x[0]        # Ancho de cada trapecio\n",
        "fsum1 = np.sum(2*y1)\n",
        "fsum = fsum1 + y[0] + y[-1]\n",
        "fArea = (dx/2)*fsum     # suma de areas del trapecio\n",
        "print(fArea)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mfiDiyofhn9g",
        "outputId": "462ae9c3-17e6-40c2-cbb8-9e62452ca0dc"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-2.8047739569477637e-16\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###  ejercicio2\n",
        "metodo de montecarlo\n",
        "\n"
      ],
      "metadata": {
        "id": "BQebhNXainin"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "N = 84832\n",
        "# limite inferior\n",
        "a = 1\n",
        "# limite superior\n",
        "b =np.sqrt(3)\n",
        "x = np.random.uniform(a, b, N)\n",
        "\n",
        "y = (x)*np.sqrt(x**2+9)\n",
        "\n",
        "sumfx = np.sum(y)\n",
        "farea = ((b - a) / N) * sumfx\n",
        "print(\"El área es: \", farea)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6FtZu-ecimk3",
        "outputId": "e36df512-11cd-4af2-dd77-dd76e0ee0ea5"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "El área es:  3.3159093307738483\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "metodo jacobi"
      ],
      "metadata": {
        "id": "Pt8R9imKkd5_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from numpy import array, zeros, diag, diagflat, dot"
      ],
      "metadata": {
        "id": "uHlz6yZMki7B"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def jacobi(A,b,N=25,x=None):\n",
        "    \"\"\" AX=B - Jacobi Método Iterativo. \"\"\"\n",
        "    if x is None:\n",
        "        x = zeros(len(A[0]))\n",
        "    D = diag(A)\n",
        "    R = A - diagflat(D)\n",
        "    for i in range(N):\n",
        "        x = (b - dot(R,x)) / D\n",
        "    return x"
      ],
      "metadata": {
        "id": "a_jwbGtzl4d3"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "A = array([[1, -1, 3],[3, -1, 1], [3,-1 ,1 ])\n",
        "b = array([, , ])\n",
        "\n",
        "sol = jacobi(A,b,N=3)"
      ],
      "metadata": {
        "id": "IMMhLlcQk8XX"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}